[{"/home/widoski/alkemy-app/client/src/reportWebVitals.js":"1","/home/widoski/alkemy-app/client/src/App.js":"2","/home/widoski/alkemy-app/client/src/components/Appbar.js":"3","/home/widoski/alkemy-app/client/src/index.js":"4","/home/widoski/alkemy-app/client/src/components/Home.js":"5","/home/widoski/alkemy-app/client/src/conf.js":"6","/home/widoski/alkemy-app/client/src/components/CreateRegister.js":"7","/home/widoski/alkemy-app/client/src/theme.js":"8","/home/widoski/alkemy-app/client/src/components/EditRegisters.js":"9","/home/widoski/alkemy-app/client/src/components/Paginate.js":"10","/home/widoski/alkemy-app/client/src/appContext.js":"11","/home/widoski/alkemy-app/client/src/components/RegistersIncome.js":"12","/home/widoski/alkemy-app/client/src/components/RegistersTab.js":"13","/home/widoski/alkemy-app/client/src/components/RegistersOutcome.js":"14"},{"size":362,"mtime":1611364991619,"results":"15","hashOfConfig":"16"},{"size":2624,"mtime":1611839094887,"results":"17","hashOfConfig":"16"},{"size":1817,"mtime":1611500862070,"results":"18","hashOfConfig":"16"},{"size":500,"mtime":1611364991579,"results":"19","hashOfConfig":"16"},{"size":4527,"mtime":1611690454505,"results":"20","hashOfConfig":"16"},{"size":59,"mtime":1611490649781,"results":"21","hashOfConfig":"16"},{"size":2502,"mtime":1611764397275,"results":"22","hashOfConfig":"16"},{"size":250,"mtime":1611487847745,"results":"23","hashOfConfig":"16"},{"size":3174,"mtime":1611768896893,"results":"24","hashOfConfig":"16"},{"size":377,"mtime":1611836202790,"results":"25","hashOfConfig":"16"},{"size":105,"mtime":1611764416591,"results":"26","hashOfConfig":"16"},{"size":4072,"mtime":1611839229519,"results":"27","hashOfConfig":"16"},{"size":1277,"mtime":1611839105514,"results":"28","hashOfConfig":"16"},{"size":3733,"mtime":1611839052076,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1g7t6iy",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/widoski/alkemy-app/client/src/reportWebVitals.js",[],["66","67"],"/home/widoski/alkemy-app/client/src/App.js",[],["68","69"],"/home/widoski/alkemy-app/client/src/components/Appbar.js",["70"],"import { useState } from 'react';\nimport { AppBar, Toolbar, Typography, IconButton, Button, Menu, MenuItem } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tflexGrow: 1,\n\t},\n\tmenuButton: {\n\t\tmarginRight: theme.spacing(2),\n\t},\n\ttitle: {\n\t\tflexGrow: 1,\n\t},\n\tappbarColor: {\n\t\tbackground: \"#493323\"\n\t},\n\tlink: {\n\t\ttextDecoration: \"none\",\n\t\tcolor: \"black\"\n\t}\n}));\n\nfunction Appbar({ title, children }) {\n\tconst classes = useStyles();\n\n\tconst [anchorEl, setAnchorEl] = useState(null);\n\n\tconst handleOpenMenu = (e) => {\n\t\tsetAnchorEl(e.currentTarget);\n\t};\n\n\tconst handleCloseMenu = () => {\n\t\tsetAnchorEl(null);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<AppBar className={classes.appbarColor} position=\"static\">\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tonClick={handleOpenMenu}\n\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\tclassName={classes.menuButton}\n\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\taria-label=\"menu\"\n\t\t\t\t\t\taria-controls=\"simple-menu\"\n\t\t\t\t\t\taria-haspopup=\"true\"\n\t\t\t\t\t\tonClick={handleOpenMenu}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<Menu\n\t\t\t\t\t\tid=\"simple-menu\"\n\t\t\t\t\t\tanchorEl={anchorEl}\n\t\t\t\t\t\tkeepMounted\n\t\t\t\t\t\topen={Boolean(anchorEl)}\n\t\t\t\t\t\tonClose={handleCloseMenu}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuItem><Link className={classes.link} to=\"/\">Home</Link></MenuItem>\n\t\t\t\t\t\t<MenuItem><Link className={classes.link} to=\"/registers\">My registers</Link></MenuItem>\n\t\t\t\t\t\t<MenuItem><Link className={classes.link} to=\"/registers/create\">Create registers</Link></MenuItem>\n\t\t\t\t\t</Menu>\n\t\t\t\t\t<Typography variant=\"button\" className={classes.title}>\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Button color=\"inherit\">Login</Button>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t\t{children}\n\t\t</>\n\t);\n}\n\nexport default Appbar;\n","/home/widoski/alkemy-app/client/src/index.js",[],["71","72"],"/home/widoski/alkemy-app/client/src/components/Home.js",["73","74"],"import { useEffect, useState } from 'react';\nimport { Paper, Card, Grid, Table, TableBody, TableCell, TableHead, TableRow, Typography, Toolbar } from '@material-ui/core';\nimport conf from '../conf';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport \"../app.css\";\nimport Appbar from './Appbar';\nimport moment from 'moment';\n\nconst styles = {\n    balanceBox: {\n        margin: 10,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: 100,\n        background: \"#493323\"\n    },\n    registerBox: {\n        margin: 10,\n        height: 100,\n        background: \"#493323\"\n    },\n    title: {\n        fontWeight: \"bold\",\n        textAlign: \"center\",\n        color: \"white\"\n    },\n    tableTitle: {\n        fontSize: 20,\n        fontWeight: \"bold\",\n        textAlign: \"center\",\n        width: \"100%\",\n        textAlign: \"center\"\n    },\n    linkToRegister: {\n        textDecoration: \"none\",\n        color: \"white\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100%\",\n        fontWeight: \"bold\"\n    },\n    headRow: {\n        fontWeight: \"bold\",\n    }\n}\n\nexport default function Home() {\n    const [registers, setRegisters] = useState([]);\n    const [balance, setBalance] = useState(0);\n\n    let limit = 10;\n    let offset = 0;\n\n    useEffect(() => {\n        axios.get(`${conf.API_URL}/registers?limit=${limit}&offset=${offset}`)\n            .then(res => {\n                setRegisters(res.data.rows);\n                console.log(res.data.rows)\n                let income = 0;\n                let outcome = 0;\n\n                res.data.rows.forEach(r => {\n                    if (r.type === \"income\") {\n                        income = income + parseInt(r.amount);\n                    }\n                    if (r.type === \"outcome\") {\n                        outcome = outcome + parseInt(r.amount);\n                    }\n                });\n                const balance = income - outcome;\n                setBalance(balance);\n            });\n    }, [])\n\n    return (\n        <Grid container>\n            <Appbar title=\"Welcome\">\n                <Grid item xs={12} xl={6}>\n                    <Toolbar>\n                        <Typography variant=\"button\" style={styles.tableTitle}>Last registers</Typography>\n                    </Toolbar>\n                    <Table style={styles.table} component={Paper}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell style={styles.headRow}>Type</TableCell>\n                                <TableCell style={styles.headRow}>Concept</TableCell>\n                                <TableCell style={styles.headRow}>Date</TableCell>\n                                <TableCell style={styles.headRow}>Amount</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                registers.map(r => (\n                                    <TableRow key={r.id}>\n                                        <TableCell>{r.type}</TableCell>\n                                        <TableCell>{r.concept}</TableCell>\n                                        <TableCell>{moment(r.createdAt).format(\"ll\")}</TableCell>\n                                        <TableCell>{`$${r.amount}`}</TableCell>\n                                    </TableRow>\n                                ))\n                            }\n                        </TableBody>\n                    </Table>\n                </Grid>\n                <Grid container item xs={12}>\n                    <Grid item xs={6}>\n                        <Card style={styles.balanceBox}>\n                            <Typography variant=\"button\" style={styles.title}>Balance</Typography>\n                            <Typography variant=\"button\" style={styles.title}>{`$${balance}`}</Typography>\n                        </Card>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Card style={styles.registerBox}>\n                            <Typography variant=\"button\">\n                                <Link className=\"linkToRegister\" style={styles.linkToRegister} to=\"/registers\">My registers</Link>\n                            </Typography>\n                        </Card>\n                    </Grid>\n                </Grid>\n            </Appbar>\n        </Grid>\n    )\n}\n",["75","76"],"/home/widoski/alkemy-app/client/src/conf.js",["77"],"export default {\n    API_URL: \"http://localhost:5000/api\"\n}","/home/widoski/alkemy-app/client/src/components/CreateRegister.js",[],"/home/widoski/alkemy-app/client/src/theme.js",[],"/home/widoski/alkemy-app/client/src/components/EditRegisters.js",["78"],"import { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Button, Paper, TextField, Select, MenuItem, Grid, InputLabel } from '@material-ui/core';\nimport Appbar from './Appbar';\nimport axios from \"axios\";\nimport conf from '../conf';\nimport AppContext from '../appContext';\n\nconst styles = {\n    formContainer: {\n        margin: 20,\n    },\n    form: {\n        display: \"flex\",\n        flexDirection: \"column\"\n    },\n    fields: {\n        margin: 10\n    }\n}\n\nexport default function EditRegisters(props) {\n    const context = useContext(AppContext);\n\n    const { id } = useParams();\n\n    const [updateRegister, setUpdateRegister] = useState({\n        concept: \"\",\n        amount: \"\",\n        type: \"\"\n    });\n\n    useEffect(() => {\n        axios.get(`${conf.API_URL}/registers/${id}`)\n            .then(res => {\n                const register = res.data;\n\n                setUpdateRegister({\n                    ...updateRegister,\n                    concept: register.concept,\n                    amount: register.amount,\n                    type: register.type\n                });\n            })\n            .catch(err => console.log(err))\n    }, [])\n\n    const onChangeHandler = (e) => {\n        const { name, value } = e.target;\n\n        setUpdateRegister({\n            ...updateRegister,\n            [name]: value\n        });\n    }\n\n    const onSubmitForm = (e) => {\n        e.preventDefault();\n\n        axios.put(`${conf.API_URL}/registers/${id}`, updateRegister)\n            .then(res => {\n                context.handleSnackbar(\"success\", \"Registro actualizado\", true);\n                props.history.push(\"/registers\")\n            })\n            .catch(err => context.handleSnackbar(\"error\", \"No se pudo actualizar el registro\", true));\n    }\n\n    return (\n        <Grid>\n            <Appbar title=\"Edit register\">\n                <Paper style={styles.formContainer}>\n                    <form onSubmit={onSubmitForm} style={styles.form}>\n                        <TextField style={styles.fields} name=\"concept\" label=\"Concept\" onChange={onChangeHandler} value={updateRegister.concept} />\n                        <TextField style={styles.fields} name=\"amount\" label=\"Amount\" onChange={onChangeHandler} value={updateRegister.amount} />\n                        <InputLabel style={styles.fields} id=\"type\">Operation</InputLabel>\n                        <Select\n                            name=\"type\"\n                            labelId=\"type\"\n                            onChange={onChangeHandler}\n                            value={updateRegister.type}\n                            style={styles.fields}\n                            disabled\n                        >\n                            <MenuItem disabled>Type</MenuItem>\n                            <MenuItem value={\"income\"}>Income</MenuItem>\n                            <MenuItem value={\"outcome\"}>Outcome</MenuItem>\n                        </Select>\n                        <Button fullWidth type=\"submit\" color=\"primary\" variant=\"contained\">Edit</Button>\n                    </form>\n                </Paper>\n            </Appbar>\n        </Grid>\n    )\n}\n","/home/widoski/alkemy-app/client/src/components/Paginate.js",[],"/home/widoski/alkemy-app/client/src/appContext.js",[],"/home/widoski/alkemy-app/client/src/components/RegistersIncome.js",["79"],"/home/widoski/alkemy-app/client/src/components/RegistersTab.js",["80"],"/home/widoski/alkemy-app/client/src/components/RegistersOutcome.js",["81"],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"82","replacedBy":"86"},{"ruleId":"84","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":51,"column":7,"nodeType":"90","endLine":51,"endColumn":31},{"ruleId":"82","replacedBy":"91"},{"ruleId":"84","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":35,"column":9,"nodeType":"95","messageId":"96","endLine":35,"endColumn":18},{"ruleId":"97","severity":1,"message":"98","line":77,"column":8,"nodeType":"99","endLine":77,"endColumn":10,"suggestions":"100"},{"ruleId":"82","replacedBy":"101"},{"ruleId":"84","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":1,"column":1,"nodeType":"105","endLine":3,"endColumn":2},{"ruleId":"97","severity":1,"message":"106","line":46,"column":8,"nodeType":"99","endLine":46,"endColumn":10,"suggestions":"107"},{"ruleId":"97","severity":1,"message":"108","line":43,"column":8,"nodeType":"99","endLine":43,"endColumn":10,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":2,"column":27,"nodeType":"112","messageId":"113","endLine":2,"endColumn":33},{"ruleId":"97","severity":1,"message":"108","line":43,"column":7,"nodeType":"99","endLine":43,"endColumn":9,"suggestions":"114"},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],["115"],["116"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["115"],["116"],"no-dupe-keys","Duplicate key 'textAlign'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'limit' and 'offset'. Either include them or remove the dependency array.","ArrayExpression",["117"],["115"],["116"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'id' and 'updateRegister'. Either include them or remove the dependency array. You can also do a functional update 'setUpdateRegister(u => ...)' if you only need 'updateRegister' in the 'setUpdateRegister' call.",["118"],"React Hook useEffect has a missing dependency: 'fetchRegisters'. Either include it or remove the dependency array.",["119"],"no-unused-vars","'AppBar' is defined but never used.","Identifier","unusedVar",["120"],"no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"125","fix":"127"},"Update the dependencies array to be: [limit, offset]",{"range":"128","text":"129"},"Update the dependencies array to be: [id, updateRegister]",{"range":"130","text":"131"},"Update the dependencies array to be: [fetchRegisters]",{"range":"132","text":"133"},{"range":"134","text":"133"},[2109,2111],"[limit, offset]",[1201,1203],"[id, updateRegister]",[1085,1087],"[fetchRegisters]",[1055,1057]]